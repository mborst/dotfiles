#!/usr/bin/env bash
## Requires git-shortcuts

cat <<'EOF'
fzf_complete_branch() {
  _fzf_complete "--tac" "$@" < <(
    git for-each-ref refs/heads/ --format '%(refname:short)' \
          --sort committerdate
  )
}

fzf_complete_local_commit() {
  _fzf_complete "--tac" "$@" < <(
      git log -100 --oneline origin/HEAD..
  )
}

fzf_complete_local_commit_post() {
  cut -d ' ' -f 1
}

fzf_complete_pod() {
  _fzf_complete "--tac" "$@" < <(
    kubectl get pods | tail -n +2
  )
}

fzf_complete_pod_post() {
  cut -d ' ' -f 1
}

fzf_complete_rs() {
  _fzf_complete "--tac" "$@" < <(
    kubectl get rs | tail -n +2
  )
}

fzf_complete_rs_post() {
  cut -d ' ' -f 1
}

fzf_complete_deployment() {
  _fzf_complete "--tac" "$@" < <(
    kubectl get deployments | tail -n +2
  )
}

fzf_complete_deployment_post() {
  cut -d ' ' -f 1
}

fzf_complete_service() {
  _fzf_complete "--tac" "$@" < <(
    kubectl get services | tail -n +2
  )
}

fzf_complete_service_post() {
  cut -d ' ' -f 1
}

fzf_complete_secret() {
  _fzf_complete "--tac" "$@" < <(
    kubectl get secrets | tail -n +2
  )
}

fzf_complete_secret_post() {
  cut -d ' ' -f 1
}

fzf_complete_cm() {
  _fzf_complete "--tac" "$@" < <(
    kubectl get cm | tail -n +2
  )
}

fzf_complete_cm_post() {
  cut -d ' ' -f 1
}

_fzf_complete_klf() {
  _fzf_complete "--tac" "$@" < <(
    kubectl get pods -o json | jq -r '.items[] | .metadata.name as $name | "\($name) \(.spec.containers[].name)"'
  )
}

_fzf_complete_brew() {
  ARGS="$@"
  if [[ $ARGS == 'brew uninstall'* ]]; then
    INSTALLED="$(brew list --cask)"
    _fzf_complete --reverse --multi -- "$@" < <(
        echo "$INSTALLED"
    )
  elif [[ $ARGS == 'brew install'* ]] || [[ $ARGS == 'brew info'* ]] || [[ $ARGS == 'brew upgrade'* ]]; then
    FORMULA_CACHE_FILE="$HOME/.brew-formulae"
    CASK_CACHE_FILE="$HOME/.brew-cask-formulae"
    echo "\nUpdating..."
    brew update | ggrep "Already up-to-date."
    echo $IS_UPTODATE
    if [[ ! -f $FORMULA_CACHE_FILE ]] || [[ ! -f $CASK_CACHE_FILE ]] || [[ $IS_UPTODATE -ne 0 ]]; then
      echo "Refreshing cache..."
      AVAILABLE_FORMULAS="$(brew formulae | tee $FORMULA_CACHE_FILE)"
      AVAILABLE_CASKS="$(brew formulae --casks | tee $CASK_CACHE_FILE)"
    else
      AVAILABLE_FORMULAS="$(cat $FORMULA_CACHE_FILE)"
      AVAILABLE_CASKS="$(cat $CASK_CACHE_FILE)"
    fi
    _fzf_complete --reverse --multi -- "$@" < <(
        echo "$AVAILABLE_FORMULAS"
        echo "$AVAILABLE_CASKS"
    )
  else
    _fzf_complete -- "$@" < <(
      echo "No completion registered for ${ARGS}."
    )
  fi
}

# junegunns git-fzf bindings
# -------------

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% --min-height 20 --border --bind ctrl-/:toggle-preview "$@"
}

_gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
  cut -c4- | sed 's/.* -> //'
}

_gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log -100 --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

_gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {}'
}

_gh() {
  is_in_git_repo || return
  git log -100 --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' |
  grep -o "[a-f0-9]\{7,\}"
}

_gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log -100 --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
  cut -d$'\t' -f1
}

_gs() {
  is_in_git_repo || return
  git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
  cut -d: -f1
}

join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

bind-git-helper() {
  local c
  for c in $@; do
    eval "fzf-g$c-widget() { local result=\$(_g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
    eval "zle -N fzf-g$c-widget"
    eval "bindkey '^g^$c' fzf-g$c-widget"
  done
}
bind-git-helper f b t r h s

unset -f bind-git-helper
EOF

for command in gbd gbD gr gro gxh gxk gxm gxs gco glog gd
do
  cat <<EOF
_fzf_complete_$command() {
  fzf_complete_branch "\$@"
}
EOF
done

for command in gcf gcs grom gri
do
  cat <<EOF
_fzf_complete_${command}() {
  fzf_complete_local_commit "\$@"
}
_fzf_complete_${command}_post() {
  fzf_complete_local_commit_post "\$@"
}
EOF
done

# Requires oh-my-zsh kubernetes shortcuts
for command in kgp kl kdelp kdp keti kpf kep
do
  cat <<EOF
_fzf_complete_${command}() {
  fzf_complete_pod "\$@"
}
_fzf_complete_${command}_post() {
  fzf_complete_pod_post "\$@"
}
EOF
done

for command in kgrs kdelrs kdrs
do
  cat <<EOF
_fzf_complete_${command}() {
  fzf_complete_rs "\$@"
}
_fzf_complete_${command}_post() {
  fzf_complete_rs_post "\$@"
}
EOF
done

for command in kgd kdeld kdd ksd
do
  cat <<EOF
_fzf_complete_${command}() {
  fzf_complete_deployment "\$@"
}
_fzf_complete_${command}_post() {
  fzf_complete_deployment_post "\$@"
}
EOF
done

for command in kgs kdels kds
do
  cat <<EOF
_fzf_complete_${command}() {
  fzf_complete_service "\$@"
}
_fzf_complete_${command}_post() {
  fzf_complete_service_post "\$@"
}
EOF
done

for command in kgsec kdelsec kdsec
do
  cat <<EOF
_fzf_complete_${command}() {
  fzf_complete_secret "\$@"
}
_fzf_complete_${command}_post() {
  fzf_complete_secret_post "\$@"
}
EOF
done

for command in kgcm kdelcm kdcm
do
  cat <<EOF
_fzf_complete_${command}() {
  fzf_complete_cm "\$@"
}
_fzf_complete_${command}_post() {
  fzf_complete_cm_post "\$@"
}
EOF
done
